AWSTemplateFormatVersion: 2010-09-09
Description: Create small VPC for FridayHITT company

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  SubnetIpBlocks: 
    Description: "Comma-delimited list of 6 CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.0.0.0/24, 10.0.1.0/24, 10.0.2.0/24, 10.0.3.0/24, 10.0.4.0/24, 10.0.5.0/24"
  AvailabilityZone:
    Description: selet the AZ
    Type:  String
    Default: eu-west-1a
    AllowedValues:
      - eu-west-1a
      - eu-west-1b
      - eu-west-1c
  DbMasterUserName:
    Description: name of main user of db
    Type: String
    Default: root
  DbMasterUserPassword:
    Description: password of main user of db
    Type: String
    Default: password


Resources:
  FridayHITTvpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: FridayHITTvpc
    
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: IGW
 
  IGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref FridayHITTvpc
   
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: !Select [0, !Ref SubnetIpBlocks]
      MapPublicIpOnLaunch: true
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: PublicSubnet1
   
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: !Select [1, !Ref SubnetIpBlocks]
      MapPublicIpOnLaunch: true
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: PublicSubnet2
   
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: PublicRouteTable
   
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable
    
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: !Select [2, !Ref SubnetIpBlocks]
      MapPublicIpOnLaunch: false
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: PrivateSubnet1
    
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: !Select  [3, !Ref SubnetIpBlocks]
      MapPublicIpOnLaunch: false
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: PrivateSubnet2
    
  PrivateDBSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: !Select [4, !Ref SubnetIpBlocks]
      MapPublicIpOnLaunch: false
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: PrivateDBSubnet1
   
  PrivateDBSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: !Select [5, !Ref SubnetIpBlocks]
      MapPublicIpOnLaunch: false
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: PrivateDBSubnet2
 
  PublicMachine1:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone: eu-west-1a
      ImageId: ami-0a1f6cc8163bdcc75
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
        - !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: PublicMachine1
   
  PublicMachine2:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone: eu-west-1b
      ImageId: ami-0a1f6cc8163bdcc75
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
        - !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: PublicMachine2
   
  PrivateMachine1:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone: eu-west-1a
      ImageId: ami-0a1f6cc8163bdcc75
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: PrivateMachine1
   
  PrivateMachine2:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone: eu-west-1b
      ImageId: ami-0a1f6cc8163bdcc75
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: PrivateMachine2
    
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable Ports 80, 443'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: ALBSecurityGroup
  
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable Port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  #should be owners own Ip address or trusted block of addresses
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: SSHSecurityGroup
   
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable Ports 80, 443, 22'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: WebServerSecurityGroup
   
  PrivateAppSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable Ports 80, 443, 22'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: PrivateAppSecurityGroup

  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable Port 3306
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: DBSecurityGroup
    
  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPC
      Tags:
        - Key: Name
          Value: NatGateway1EIP
   
  NatGateway2EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPC
      Tags:
        - Key: Name
          Value: NatGateway2EIP
   
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NatGateway1
    
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NatGateway2
    
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: PrivateRouteTable1
   
  PrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1
   
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateDBSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateDBSubnet1
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref FridayHITTvpc
      Tags:
        - Key: Name
          Value: PrivateRouteTable2
    
  PrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref PrivateRouteTable2
    
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  PrivateDBSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateDBSubnet2

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '20'
      AvailabilityZone: eu-west-1a
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: mysqldb
      DBName: '{{resolve:ssm:dbName:1}}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: MySQL
      MasterUsername: root
      MasterUserPassword: password
      MultiAZ: false
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
   
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: subnet group
      SubnetIds:
        - !Ref PrivateDBSubnet1
        - !Ref PrivateDBSubnet2
      Tags:
        - Key: Name
          Value: DBSubnetGroup
    
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: !Ref FridayHITTvpc
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId 

Outputs:
  FridayHITTvpc:
    Export:
      Name: !Sub '${AWS::StackName}-FridayHITTvpc'
    Value: !Ref FridayHITTvpc
  PublicSubnet1:
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1'
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2'
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1'
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2'
    Value: !Ref PrivateSubnet2
  PrivateDBSubnet1:
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PrivateDBSubnet1ID'
    Value: !Ref PrivateDBSubnet1
  PrivateDBSubnet2:
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-PrivateDBSubnet2ID'
    Value: !Ref PrivateDBSubnet2

  PublicMachine1:
    Value: !Ref PublicMachine1
  PublicMachine2:
    Value: !Ref PublicMachine2
  PrivateMachine1:
    Value: !Ref PrivateMachine1
  PrivateMachine2:
    Value: !Ref PrivateMachine2

  ALBSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}-ALBSecurityGroup'
    Value: !Ref ALBSecurityGroup
  SSHSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}-SSHSecurityGroup'
    Value: !Ref SSHSecurityGroup
  WebServerSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}-WebServerSecurityGroup'
    Value: !Ref WebServerSecurityGroup
  PrivateAppSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}-PrivateAppSecurityGroup'
    Value: !Ref PrivateAppSecurityGroup
  DBSecurityGroup:
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DBSecurityGroupID'
    Value: !Ref DBSecurityGroup

  
